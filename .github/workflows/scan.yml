name: TruffleHog PR Secret Scan
on:
  pull_request:
    branches:
      - main  

jobs:
  scan-secrets:
    name: Scan for Secrets with TruffleHog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version

      - name: Run TruffleHog on PR changes
        run: |
          # Ensure we have the base branch
          git fetch origin ${{ github.base_ref }}
          
          # Scan the PR changes
          trufflehog git file://. --since-commit ${{ github.event.pull_request.base.sha }} --json --no-update > trufflehog_results.json
          
          # scan changed files directly
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | while read file; do
            if [ -f "$file" ]; then
              trufflehog filesystem "$file" --json --no-update >> trufflehog_files_results.json
            fi
          done || true

      - name: Check for secrets and block PR
        run: |
          echo "Checking scan results..."
          
          # Combine all results
          cat trufflehog_results.json trufflehog_files_results.json 2>/dev/null | jq -s 'add' > combined_results.json || echo "[]" > combined_results.json
          
          # Count secrets found
          SECRET_COUNT=$(cat combined_results.json | jq 'length')
          
          echo "Number of secrets found: $SECRET_COUNT"
          
          if [ "$SECRET_COUNT" -gt 0 ]; then
            echo "ðŸš¨ SECRETS DETECTED! This PR cannot be merged."
            echo ""
            echo "Secrets found:"
            cat combined_results.json | jq -r '.[] | "- \(.DetectorName): \(.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file):\(.SourceMetadata.Data.Filesystem.line // .SourceMetadata.Data.Git.line)"'
            echo ""
            echo "Please remove these secrets before merging."
            exit 1
          else
            echo "âœ… No secrets detected. PR can proceed."
          fi

      - name: Upload scan results (always runs)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trufflehog-results
          path: |
            trufflehog_results.json
            trufflehog_files_results.json
            combined_results.json

      - name: Comment on PR if secrets found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let results = [];
            
            try {
              const data = fs.readFileSync('combined_results.json', 'utf8');
              results = JSON.parse(data);
            } catch (error) {
              console.log('Could not read results file');
              return;
            }
            
            if (results.length > 0) {
              let comment = `## ðŸš¨ Secrets Detected!\n\n`;
              comment += `This PR contains **${results.length}** potential secret(s) and cannot be merged until they are removed.\n\n`;
              comment += `### Detected Secrets:\n`;
              
              results.forEach((result, index) => {
                const file = result.SourceMetadata?.Data?.Filesystem?.file || result.SourceMetadata?.Data?.Git?.file || 'Unknown';
                const line = result.SourceMetadata?.Data?.Filesystem?.line || result.SourceMetadata?.Data?.Git?.line || 'Unknown';
                comment += `${index + 1}. **${result.DetectorName}** in \`${file}\` at line ${line}\n`;
              });
              
              comment += `\n### Next Steps:\n`;
              comment += `1. Remove the detected secrets from your code\n`;
              comment += `2. If these are legitimate secrets, store them in environment variables or a secure secret management system\n`;
              comment += `3. Push your changes to update this PR\n\n`;
              comment += `The PR will be automatically re-scanned when you push new commits.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
